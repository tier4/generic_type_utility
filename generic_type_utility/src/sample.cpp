// Copyright 2022 Takagi, Isamu
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <generic_type_utility/generic_message.hpp>
#include <rclcpp/rclcpp.hpp>
#include <yaml-cpp/yaml.h>
#include <algorithm>
#include <array>
#include <iostream>
using namespace generic_type_utility;  // NOLINT

// clang-format off
const auto data1 = std::array<uint8_t, 28> ({
  0x00, 0x01, 0x00, 0x00,
  0x95, 0xfc, 0xa6, 0x63,
  0x38, 0xcc, 0x50, 0x30,
  0x09, 0x00, 0x00, 0x00,
  0x66, 0x72, 0x61, 0x6d,
  0x65, 0x20, 0x33, 0x30,
  0x00, 0x00, 0x00, 0x00
});

const auto data2 = std::array<uint8_t, 364> ({
  0x00, 0x01, 0x00, 0x00,
  0xbd, 0x99, 0xa7, 0x63,
  0xf3, 0x94, 0xf9, 0x20,
  0x04, 0x00, 0x00, 0x00,
  0x6d, 0x61, 0x70, 0x00,
  0x00, 0x00, 0x00, 0x80,
  0x52, 0xac, 0x14, 0xc0,
  0x00, 0x00, 0x00, 0x60,
  0x63, 0x3f, 0x14, 0x40,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x97, 0x3c, 0x27, 0xa1,
  0xc5, 0x93, 0xed, 0x3f,
  0xed, 0x40, 0xad, 0x73,
  0xae, 0x6d, 0xd8, 0x3f,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xd0, 0x3f,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xd0, 0x3f,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x40,
  0xc4, 0x8b, 0xb1, 0x3f
});
// clang-format on

template <class T>
rclcpp::SerializedMessage create_serialized(const T & data)
{
  rclcpp::SerializedMessage serialized;
  rcutils_uint8_array_t & buffer = serialized.get_rcl_serialized_message();
  serialized.reserve(data.size());
  buffer.buffer_length = data.size();
  std::copy(data.begin(), data.end(), buffer.buffer);
  return serialized;
}

int main()
{
  const auto serialized = create_serialized(data2);
  const auto generic = GenericMessage("geometry_msgs/msg/PoseWithCovarianceStamped");
  const auto yaml = generic.deserialize(serialized);
  std::cout << yaml << std::endl;
}

/*
void test1()
{
  const auto access = generic_type_utility::TypeAccess("test.yaml.data@1");
  std::cout << access.string() << std::endl;

  YAML::Node yaml;
  yaml["hoge"] = "hoge";
  yaml["fuga"] = "fuga";
  yaml["test"]["yaml"]["data"][0] = 123;
  yaml["test"]["yaml"]["data"][1] = 456;
  yaml["test"]["yaml"]["data"][2] = 789;

  YAML::Node node = generic_type_utility::apply(access, yaml);
  std::cout << yaml << std::endl;
  std::cout << node << std::endl;
}
*/
